package Login;

import Set_Category.SetCat;
import javafx.embed.swing.JFXPanel;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.*;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.*;
import javafx.scene.control.Menu;
import javafx.scene.input.KeyCombination;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.*;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.util.*;


/**
 * @author alessioborgi
 * @created 14 / 05 / 2021 - 18:27
 * @project CATEGORY_THEORY
 */
public class JavaFX {
    private static Group root  =  new  Group();
    //private static StackPane root  =  new StackPane();
    private static Scene  scene  =  new  Scene(root);

    private static MenuBar main_menu = new MenuBar();
    private static Menu Create = new Menu("Create");
    private static Menu Draw = new Menu("Draw");
    private static Menu Cancel = new Menu("Cancel");
    private static Menu Help = new Menu("Help");
    private static Menu New_Object = new Menu("New Object");


    private static MenuItem Exit_now = new MenuItem("Exit");
    private static MenuItem Clear_all = new MenuItem("Clear All");
    private static MenuItem Back_now = new MenuItem("Back");


    private static MenuItem New_Morphism = new MenuItem("New Morphism");
    private static MenuItem New_Semigroup = new MenuItem("New Semigroup");
    private static MenuItem New_Monoid = new MenuItem("New Monoid");
    private static MenuItem New_Group = new MenuItem("New Group");
    private static MenuItem New_Ring = new MenuItem("New Ring");
    private static MenuItem new_Set = new MenuItem("New Set");
    private static MenuItem New_Vector = new MenuItem("New Vector");
    private static MenuItem About = new MenuItem("About");
    private static SeparatorMenuItem separator = new SeparatorMenuItem();

    private static Canvas canvas = new Canvas(800, 620);
    private static GraphicsContext gc = canvas.getGraphicsContext2D();
    private static Button exit = new Button("Exit");
    private static Button clear_all = new Button("Clear");
    private static Button back = new Button("Back");
    private static HBox box = new HBox(clear_all, exit, back);

    public static void initFX(JFXPanel fxPanel) {
        // This method is invoked on the JavaFX thread
        Scene scene = createScene();
        fxPanel.setScene(scene);
    }

    public static Scene createScene() {
        Help.getItems().add(About);
        Create.getItems().addAll(New_Object,  New_Morphism);
        New_Object.getItems().addAll(New_Semigroup, New_Monoid, New_Group, New_Ring, new_Set, New_Vector);

        main_menu.getMenus().addAll(Create, Draw, Cancel, Help);
        Cancel.getItems().addAll(Clear_all, Back_now, separator, Exit_now);

        scene.setFill(new LinearGradient(0, 0, 1, 1, true,    //sizing
                CycleMethod.NO_CYCLE,                  //cycling
                new Stop(0, Color.GOLD),            //colors
                new Stop(1, Color.ORANGE)
        ));

        addActions();
        setter();
        root.getChildren().addAll(canvas, box, main_menu);
        return (scene);
    }

    private static void setter(){
        /**
        New_Integer_Category.setAccelerator(KeyCombination.keyCombination("shortcut+I"));
        New_Boolean_Category.setAccelerator(KeyCombination.keyCombination("shortcut+O"));
        New_Vector_Category.setAccelerator(KeyCombination.keyCombination("shortcut+V"));
         New_Set_Category.setAccelerator(KeyCombination.keyCombination("shortcut+S"));
        */

         Exit_now.setAccelerator(KeyCombination.keyCombination("shortcut+E"));
        Back_now.setAccelerator(KeyCombination.keyCombination("shortcut+B"));
        Clear_all.setAccelerator(KeyCombination.keyCombination("shortcut+C"));

        box.setSpacing(10);
        box.setAlignment(Pos.CENTER_LEFT);
        box.setPadding(new Insets(570, 0, 0, 340));
    }

    private static void addActions(){
        EventHandler exit_event = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
                alert.setTitle("Confirm Exit");
                alert.setHeaderText("Confirm that you want to Exit :(");
                alert.setContentText("Anyway, Thank you so much for using our Category Theory's Application!");

                Optional<ButtonType> result = alert.showAndWait();
                if(result.isPresent() && result.get() == ButtonType.OK){
                    System.exit(0);
                }
            }
        };

        /**
        EventHandler form_event = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                Stage stage1 = new Stage();
                new Choice().start(stage1);
            }
        };
        */
        EventHandler go_back = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
                alert.setTitle("Confirm Back to Login");
                alert.setHeaderText("Confirm that you want to go Back to the Login :(");
                alert.setContentText("Anyway, Thank you for using this app!");

                Optional<ButtonType> result = alert.showAndWait();
                if(result.isPresent() && result.get() == ButtonType.OK){
                    Login.Menu.frame.dispose();
                    Login_Start frame_1 = new Login_Start();
                    frame_1.setVisible(true);
                }
            }
        };


        EventHandler clear_event = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                gc.clearRect(0, 0, gc.getCanvas().getHeight(), gc.getCanvas().getWidth());
            }
        };


        EventHandler new_category_event = new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent ) {
                gc.setFill(Color.DARKGREEN);
                gc.setFill(Color.DARKGREEN);
                gc.fillOval(50, 50, 50, 50);
                gc.fillOval(200, 200, 50, 50);

            }
        };

        clear_all.setOnAction(clear_event);
        Clear_all.setOnAction(clear_event);
        Exit_now.setOnAction(exit_event);
        exit.setOnAction(exit_event);
        Back_now.setOnAction(go_back);
        back.setOnAction(go_back);

        //****************************************************
        Stage group = new Stage();
        group.setWidth(700);
        group.setHeight(500);

        Stage monoid = new Stage();
        monoid.setWidth(700);
        monoid.setHeight(500);

        Stage ring = new Stage();
        ring.setWidth(700);
        ring.setHeight(500);

        Stage semigroup = new Stage();
        semigroup.setWidth(700);
        semigroup.setHeight(500);

        Stage set = new Stage();
        set.setWidth(700);
        set.setHeight(500);

        Stage vector = new Stage();
        vector.setWidth(700);
        set.setHeight(500);

        group.setTitle("Group Category");
        monoid.setTitle("Monoid Category");
        ring.setTitle("Ring Category");
        semigroup.setTitle("Semigroup Category");
        set.setTitle("Set Category");
        vector.setTitle("Vector Category");

        VBox groupVBox = new VBox();
        VBox monoidVBox = new VBox();
        VBox ringVBox = new VBox();
        VBox semigroupVBox = new VBox();
        VBox setVBox = new VBox();
        VBox vectorVBox = new VBox();

        Scene groupScene = new Scene(groupVBox);
        Scene monoidScene = new Scene(monoidVBox);
        Scene ringScene = new Scene(ringVBox);
        Scene semigroupScene = new Scene(semigroupVBox);
        Scene setScene = new Scene(setVBox);
        Scene vectorScene = new Scene(vectorVBox);

        group.setScene(groupScene);
        monoid.setScene(monoidScene);
        ring.setScene(ringScene);
        semigroup.setScene(semigroupScene);
        set.setScene(setScene);
        vector.setScene(vectorScene);

        //************************************+++++++++++++++++

        New_Semigroup.setOnAction(e->{ semigroup.show();});
        New_Group.setOnAction(e->{ group.show();});
        new_Set.setOnAction(e->{ set.show();});
        New_Vector.setOnAction(e->{ vector.show();});
        New_Ring.setOnAction(e->{ ring.show();});
        New_Monoid.setOnAction(e->{ monoid.show();});


        ////////////////////////////////////

        HBox typeHBox = new HBox();
        typeHBox.setMinHeight(100);
        typeHBox.setMinWidth(700);
        typeHBox.setAlignment(Pos.CENTER_LEFT);
        HBox morphHBox = new HBox();
        morphHBox.setMinHeight(100);
        morphHBox.setMinWidth(700);
        morphHBox.setAlignment(Pos.CENTER_LEFT);
        HBox identityHBox = new HBox();
        identityHBox.setMinHeight(100);
        identityHBox.setMinWidth(700);
        identityHBox.setAlignment(Pos.CENTER_LEFT);
        HBox endHBox = new HBox();
        endHBox.setMinHeight(100);
        endHBox.setMinWidth(700);
        endHBox.setAlignment(Pos.CENTER);



        Label typeText = new Label("    Type:   ");
        typeText.setStyle("-fx-font-size: 30 px");
        Label morphText = new Label("    Morphism:  A   ");
        morphText.setStyle("-fx-font-size: 30 px");
        Label endMorph = new Label ("   B");
        endMorph.setStyle("-fx-font-size: 30 px");
        Label identityText = new Label("    Identity:   ");
        identityText.setStyle("-fx-font-size: 30 px");

        TextField inputText = new TextField("Type the identity...");
        inputText.setMinHeight(30);

        MenuButton type = new MenuButton("Choose the type");
        type.setStyle("-fx-font-size: 22 px");
        type.setFont(new Font("Book Antiqua", 30));

        MenuButton morph = new MenuButton("Choose the morphism");
        morph.setStyle("-fx-font-size: 22 px");



        MenuItem integer = new MenuItem("Integer");
        MenuItem string = new MenuItem("String");
        MenuItem bool = new MenuItem("Boolean");
        type.getItems().addAll(bool, integer, string);

        Button test = new Button("Test");
        test.setStyle("-fx-font-size: 22 px");
        Label empty = new Label("           ");
        Button create = new Button("Create");
        create.setStyle("-fx-font-size: 22 px");


        ////////////

        MenuItem add = new MenuItem("+");
        MenuItem sub = new MenuItem("-");
        MenuItem mul = new MenuItem("*");
        MenuItem div = new MenuItem("/");
        MenuItem per = new MenuItem("%");
        MenuItem pow = new MenuItem("^");




        /////////

        MenuItem and = new MenuItem("∧");
        MenuItem or = new MenuItem("V");
        MenuItem xor = new MenuItem("⊕");
        MenuItem nand = new MenuItem("¬∧");
        MenuItem nor = new MenuItem("¬V");
        MenuItem xnor = new MenuItem("¬⊕");

        integer.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                morph.getItems().clear();
                morph.getItems().addAll(add, sub, mul, div, per, pow);
                type.setText("Integer");
            }
        });

        bool.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                morph.getItems().clear();
                morph.getItems().addAll(and, or, xor, nand, nor, xnor);
                type.setText("Boolean");
            }
        });

        ///////////

        add.setOnAction(e->{
            morph.setText("+");
        });

        sub.setOnAction(e->{
            morph.setText("-");
        });

        mul.setOnAction(e->{
            morph.setText("*");
        });

        div.setOnAction(e->{
            morph.setText("/");
        });

        per.setOnAction(e->{
            morph.setText("%");
        });

        pow.setOnAction(e->{
            morph.setText("^");
        });

        //////////////

        and.setOnAction(e-> {morph.setText("∧"); });

        or.setOnAction(e->{ morph.setText("V"); });

        xor.setOnAction(e->{morph.setText("⊕");});

        nand.setOnAction(e->{morph.setText("¬∧");});

        nor.setOnAction(e->{morph.setText("¬V");});

        xnor.setOnAction(e->{morph.setText("¬⊕");});



        typeHBox.getChildren().addAll(typeText, type);
        morphHBox.getChildren().addAll(morphText, morph, endMorph);
        identityHBox.getChildren().addAll(identityText, inputText);
        endHBox.getChildren().addAll(test, empty, create);

        monoidVBox.getChildren().addAll(typeHBox, morphHBox, identityHBox, endHBox);


        //*********************************************************************



        HBox morphHBoxSet = new HBox();
        morphHBoxSet.setMinHeight(100);
        morphHBoxSet.setMinWidth(700);
        morphHBoxSet.setAlignment(Pos.CENTER_LEFT);
        HBox identityHBoxSet = new HBox();
        identityHBoxSet.setMinHeight(100);
        identityHBoxSet.setMinWidth(700);
        identityHBoxSet.setAlignment(Pos.CENTER_LEFT);
        HBox associativityHBoxSet = new HBox();
        associativityHBoxSet.setMinHeight(100);
        associativityHBoxSet.setMinWidth(700);
        associativityHBoxSet.setAlignment(Pos.CENTER_LEFT);
        HBox endHBoxSet = new HBox();
        endHBoxSet.setMinHeight(100);
        endHBoxSet.setMinWidth(700);
        endHBoxSet.setAlignment(Pos.CENTER);



        Label morphTextSet = new Label("    Morphism:  A   ");
        morphTextSet.setStyle("-fx-font-size: 30 px");
        Label endMorphSet = new Label ("   B");
        endMorphSet.setStyle("-fx-font-size: 30 px");


        Label identityTextSet = new Label("    Identity:   ");
        identityTextSet.setStyle("-fx-font-size: 30 px");
        TextField inputTextSet = new TextField("Type the identity...");
        inputTextSet.setMinHeight(30);
        Label space = new Label("           ");
        Button prova = new Button("Test");
        prova.setStyle("-fx-font-size: 22 px");



        Label spazio = new Label("    ");
        Button prove = new Button("Prove associativity");
        prove.setStyle("-fx-font-size: 22 px");

        Label associativitySet1 = new Label("    A  ");
        associativitySet1.setStyle("-fx-font-size: 20 px");
        TextField associativityText1 = new TextField("");
        associativityText1.setMaxSize(30,30);

        Label associativitySet2 = new Label("   (B   ");
        associativitySet2.setStyle("-fx-font-size: 20 px");
        TextField associativityText2 = new TextField("");
        associativityText2.setMaxSize(30,30);

        Label associativitySet3 = new Label("   C)  ==  (A    ");
        associativitySet3.setStyle("-fx-font-size: 20 px");
        TextField associativityText3 = new TextField("");
        associativityText3.setMaxSize(30,30);

        Label associativitySet4 = new Label ("  B)  ");
        associativitySet4.setStyle("-fx-font-size: 20 px");
        TextField associativityText4 = new TextField("");
        associativityText4.setMaxSize(30,30);

        Label associativitySet5 = new Label ("   C  ");
        associativitySet5.setStyle("-fx-font-size: 20 px");



        MenuButton morphSet = new MenuButton("Choose the morphism");
        morphSet.setStyle("-fx-font-size: 22 px");

        Button createSet = new Button("Create");
        createSet.setStyle("-fx-font-size: 22 px");

        ////////////////

        MenuItem uni = new MenuItem("U");
        MenuItem inter = new MenuItem ("∩");
        MenuItem subt = new MenuItem("-");
        MenuItem symsub = new MenuItem("Δ");

        ///////////////////////////

        Alert alertAssSet = new Alert(Alert.AlertType.INFORMATION);
        ////////////////

        uni.setOnAction(e->{
            morphSet.setText("U");
            associativityText1.setText("U");
            associativityText2.setText("U");
            associativityText3.setText("U");
            associativityText4.setText("U");

            SetCat.SetUnion obj = new SetCat.SetUnion();
            alertAssSet.setTitle("Prove Associativity");
            alertAssSet.setHeaderText("Associativity Checked");
            String x = obj.associativity();
            alertAssSet.setContentText(x);
        });

        inter.setOnAction(e->{
            morphSet.setText("∩");
            associativityText1.setText("∩");
            associativityText2.setText("∩");
            associativityText3.setText("∩");
            associativityText4.setText("∩");

            SetCat.SetIntersection obj = new SetCat.SetIntersection();
            alertAssSet.setTitle("Prove Associativity");
            alertAssSet.setHeaderText("Associativity Checked");
            String x = obj.associativity();
            alertAssSet.setContentText(x);

        });

        subt.setOnAction(e->{
            morphSet.setText("-");
            associativityText1.setText("-");
            associativityText2.setText("-");
            associativityText3.setText("-");
            associativityText4.setText("-");

            SetCat.SetDifference obj = new SetCat.SetDifference();
            alertAssSet.setTitle("Prove Associativity");
            alertAssSet.setHeaderText("Associativity Checked");
            String x = obj.associativity();
            alertAssSet.setContentText(x);
        });

        symsub.setOnAction(e->{

            morphSet.setText("Δ");
            associativityText1.setText("Δ");
            associativityText2.setText("Δ");
            associativityText3.setText("Δ");
            associativityText4.setText("Δ");

            SetCat.SetSymmetricDifference obj = new SetCat.SetSymmetricDifference();


            alertAssSet.setTitle("Prove Associativity");
            alertAssSet.setHeaderText("Associativity Checked");
            String x = obj.associativity();
            alertAssSet.setContentText(x);


        });


        ///////////////////////
        prove.setOnAction(e->{
            alertAssSet.show();

        });



        ////////////////////////////////////////
        morphSet.getItems().addAll(uni, inter, subt, symsub);
        morphHBoxSet.getChildren().addAll(morphTextSet, morphSet, endMorphSet);
        identityHBoxSet.getChildren().addAll(identityTextSet, inputTextSet, space,  prova);
        associativityHBoxSet.getChildren().addAll(spazio, prove, associativitySet1, associativityText1,associativitySet2, associativityText2,
        associativitySet3, associativityText3, associativitySet4, associativityText4, associativitySet5);
        endHBoxSet.getChildren().addAll(createSet);
        setVBox.getChildren().addAll(morphHBoxSet, identityHBoxSet, associativityHBoxSet, endHBoxSet);





    }
}
