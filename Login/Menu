import javax.swing.*;
import java.util.*;
import java.awt.event.*;

/**
 * @author alessioborgi
 * @created 03 / 05 / 2021 - 16:01
 * @project LOGIN
 */

public class Menu extends JFrame implements ActionListener{

    private JFrame frame = new JFrame();
    private JPanel panel = new JPanel();

    private ImageIcon java = new ImageIcon("img/java_2.png");
    private ImageIcon cat = new ImageIcon("img/Programming_1.jpeg");
    private ImageIcon sapienza_img = new ImageIcon("img/Sapienza.png");
    private ImageIcon acs = new ImageIcon("img/ACSAI_1.jpeg");

    private JLabel cat_label = new JLabel();
    private JLabel acsai = new JLabel();
    private JLabel sapienza = new JLabel();
    private JLabel sapienza_1 = new JLabel();
    private JLabel java_item = new JLabel();
    private JLabel java_item_1 = new JLabel();

    private JMenuBar menu = new JMenuBar();
    private JMenu Create = new JMenu("Create");
    private JMenu Draw = new JMenu("Draw");
    private JMenu Help = new JMenu("Help");
    private JMenuItem Exit = new JMenuItem("Exit");
    private JMenuItem Object = new JMenuItem("New Object");
    private JMenuItem Morphism = new JMenuItem("New Morphism");
    private JMenuItem Composition = new JMenuItem("Composition");
    private JTextArea text = new JTextArea();

    private JLabel current_date = new JLabel();
    private JLabel current_time = new JLabel();

    public Menu() {
        setter();
        adder();
        addListeners();
        clock();
        pack();
    }


    private void setter(){
        frame.setBounds(10, 10,800, 800);
        panel.setBackground(Login_Start.bordeaux);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setTitle("Login");
        panel.setLayout(null);

        java_item.setBounds(0, 20, 160, 75);
        java_item.setIcon(java);
        cat_label.setBounds(160, 20, 480, 75);
        cat_label.setIcon(cat);
        java_item_1.setBounds(640, 20, 160, 75);
        java_item_1.setIcon(java);


        current_date.setBounds(0, 625, 150, 25);
        current_date.setForeground(Login_Start.black);
        current_time.setBounds(700, 625, 100, 25 );
        current_time.setForeground(Login_Start.black);
        sapienza.setBounds(0, 650, 160, 100);
        sapienza.setIcon(sapienza_img);
        acsai.setBounds(160, 650, 480, 100);
        acsai.setIcon(acs);
        sapienza_1.setBounds(640, 650, 160, 100);
        sapienza_1.setIcon(sapienza_img);

        text.setBounds(5,5,360,320);
        frame.setJMenuBar(menu);
        frame.setVisible(true);

    }

    private void adder(){
        frame.add(panel);
        panel.add(menu);

        panel.add(java_item);
        panel.add(cat_label);
        panel.add(java_item_1);

        Create.add(Object);
        Create.add(Morphism);
        Create.add(Composition);
        Create.addSeparator();
        Create.add(Exit);

        menu.add(Create);
        menu.add(Draw);
        menu.add(Help);

        panel.add(sapienza);
        panel.add(acsai);
        panel.add(sapienza_1);

        panel.add(current_date);
        panel.add(current_time);

    }

    public void clock(){
        String months[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
        Thread clock = new Thread(){
            public void run(){
                try {
                    for(;;) {     //Never Ending Loop (We could have also used the "while(true)"
                        Calendar cal = new GregorianCalendar();
                        int day = cal.get(Calendar.DAY_OF_MONTH);
                        int month = cal.get(Calendar.MONTH);
                        int year = cal.get(Calendar.YEAR);
                        int second = cal.get(Calendar.SECOND);
                        int minute = cal.get(Calendar.MINUTE);
                        int hour = cal.get(Calendar.HOUR);
                        current_time.setText("Time " + hour + ":" + minute + ":" + second);
                        current_date.setText(" Date: " + months[month] + "/" + day + "/" + year);
                        sleep(1000);
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };
        clock.start();
    }
    private void addListeners(){
        Exit.addActionListener(this);
        Object.addActionListener(this);
        Morphism.addActionListener(this);
        Composition.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String comStr = e.getActionCommand();
        if(e.getSource()== Exit){
            if (JOptionPane.showConfirmDialog(frame, "Confirm that you want to Exit :(", "Exit", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION){
                System.exit(0);

            }
        }
        if(e.getSource()== Object)
            text.cut();
        //Object o = new Object();
        if(e.getSource()== Composition)
            text.paste();
        //Compose c = new Compose();
        if(e.getSource()== Morphism)
            text.copy();
        //Morphism m = new Morphism();
    }
}
