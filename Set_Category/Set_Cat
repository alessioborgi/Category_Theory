package Set_Category;

import java.util.*; //import every primitive Java library that begins with("java.util.")


public class SetCat extends HashSet { // declare the class as public that extends the primitive class HashSet

    private Set set; //define as SetCat's field an object of type Set

    public SetCat() { //define the constructor
        this.set = new HashSet(); //since Set is an interface, we have to assign our object to an instance,
        // we have chosen the HashSet
    }


    /**
     * Define  a new class representing the Symmetric Difference operation of Sets, which is described as (a-b)||(b-a),
     * so it takes the two sets merged.
     * The class extends its outer class, SetCat
     */
    public static class SetSymmetricDifference extends SetCat {

        /**
         * define the element that applied to a certain object of type SetCat, returns the object himself
         */
        public static SetCat SymDiffIdentity() {//the class is public, will return an object of type HashSet

            SetCat EmptySet = new SetCat();//define an
            // emptySet of type HashSet
            return EmptySet; //return it
        }

        /**
         * this method is the heart of the class, in it is defined the morphism applied between the two object, which means that
         * it explains the operation that will work between the two Objects of type SetCat.
         * The method defined is public and will return an obect of type Setcat, its two parameters are two
         * objects of type SetCat
         */
        public static SetCat applySymDif(SetCat a, SetCat b) {
            SetCat c = new SetCat(); // instantiate a new object of type HashSet
            SetCat d = new SetCat(); //instantiate a new object of type HashSet
            SetCat e = new SetCat(); // instantiate a new object of type HashSet
            for (Object ob : a) { //for every element in a
                if (!b.contains(ob)) { //if the element is NOT contained in b
                    c.add(ob); //add it to c -> a-b-> c
                }
            }
            for (Object object : b) { //for every element in b
                if (!a.contains(object)) { //if the element is NOT contained in a
                    d.add(object); //add it to d -> b-a-> d
                }
            }
            for (Object obj : c) { //for every object in set c
                if (d.contains(obj)) { //if the object is present in d
                    e.add(obj); //add it to e -> c||d -> e
                }
            }
            return e;
        }

        /**
         * This method will check if the identity works, which is the first of the two fundamental properties of categories
         * it will check it by using the application of the operation on a certain object of type SetCat
         * and the object returned by the method identity(), which, in this case, returns an EmptySet.
         * This method is defined as public and it returns a boolean(true or false) basing on the correctness of the statement
         * furthermore we set, an automatic answer given by the program, and gets as parameter an object of type
         * HashSet
         */


        public static boolean tryIdentitySymDiff(SetCat x) {
            if (applySymDif(x, SymDiffIdentity()) == x) {  //if applying the symmetric difference between the starting set and the
                // identity()
                //method, the result has the same content of the starting set, it works
                System.out.println("Identity checked: works"); //output printed
            } else {
                System.out.println("Identity checked: error");//if (x-EmptySet) has different content from x, print this
            }
            return false;
        }

        public static String tryIdentity() {
            String vero = "Correct Insertion";

            SetIntersection set = new SetIntersection();
            set.add(6);
            set.add(3);
            set.add(11);
            set.add(5);
            set.add(7);
            set.add(0);
            set.add(2);

            return vero; //output printed


        }

        /**
         * This method will apply the second fundamental property of Categories, the associativity, which means that
         * f(gh) == (fg)h, this is done by the application of applySymDif() at various level of the category, so using the
         * various variables as parameters
         * the function is public, static and returns a boolean(true or false), and a default print, the parameters are
         * three Objects of type SetCat
         */
        public static boolean associativitySymDif(SetCat a, SetCat b, SetCat c) {
            SetSymmetricDifference d = new SetSymmetricDifference(); //create a new object of type SetSymmetricDifference
            SetSymmetricDifference e = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            SetSymmetricDifference f = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            SetSymmetricDifference g = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            d.applySymDif(a, b);//contains aΔb
            e.applySymDif(c, d);//contains (aΔb)Δc
            f.applySymDif(b, c); //contains bΔc
            g.applySymDif(f, a); // contains aΔ(bΔc)
            if (e.equals(g)) { //if the content of (aΔb)Δc is equal to the content of aΔ(bΔc), it works
                System.out.println("Associativity checked: it works");
            } else {
                System.out.println("Associativity checked: error");
            }
            return false;
        }

        public static String associativity() {
            String vero = "Symmetric Difference is a valid operation";
            String falso = "ERROR, Symmetric Difference is not a valid operation";
            SetSymmetricDifference gne = new SetSymmetricDifference();
            gne.add(6);
            gne.add(3);
            gne.add(11);
            gne.add(5);
            gne.add(7);
            gne.add(0);
            gne.add(2);
            SetSymmetricDifference vv = new SetSymmetricDifference();
            vv.add(15);
            vv.add(9);
            vv.add(1);
            vv.add(85);
            vv.add(5);
            vv.add(3);
            vv.add(4);
            SetSymmetricDifference xx = new SetSymmetricDifference();
            xx.add(15);
            xx.add(9);
            xx.add(1);
            xx.add(85);
            xx.add(5);
            xx.add(3);
            xx.add(4);

            SetSymmetricDifference dd = new SetSymmetricDifference(); //create a new object of type SetSymmetricDifference
            SetSymmetricDifference ee = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            SetSymmetricDifference ff = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            SetSymmetricDifference gg = new SetSymmetricDifference();//create a new object of type SetSymmetricDifference
            dd.applySymDif(gne, vv);//contains aΔb
            ee.applySymDif(xx, dd);//contains (aΔb)Δc
            ff.applySymDif(vv, xx); //contains bΔc
            gg.applySymDif(ff, gne); // contains aΔ(bΔc)
            if (ee.equals(gg)) { //if the content of (aΔb)Δc is equal to the content of aΔ(bΔc), it works
                return vero;
            } else {
                return falso;
            }


        }

    }

    /**
     * Define  a new class representing the Union operation of Sets, which is described as a||b, so it takes the
     * two sets merged.
     * The class extends its outer class, SetCat
     */
    public static class SetUnion extends SetCat {

        /**
         * this method defines the element that applied to an object of type SetCat with the method applyUnion(),
         * will return the object itself, in this case it will return an EmptySet
         */
        public static SetCat unionIdentity() {
            SetCat EmptySet = new SetCat();
            return EmptySet;
        }

        /**
         * this method applies the effective operation between two sets.
         * It is defined as static and public, its output is an object of type SetCat, and it has as parameters
         * two Objects of type SetCat
         */
        public static SetCat applyUnion(SetCat a, SetCat b) {

            SetCat c = new SetCat();
            for (Object obj : a) {
                c.add(obj);
            }

            for (Object object : b) {
                c.add(object);
            }
            return c; //there will be no repetitions since Sets already have the primitive propriety
            // of not having repetitions in them
        }

        /**
         * This method will check if the identity works, which is the first of the two fundamental properties of categories
         * it will check it by using the application of the operation on a certain object of type SetCat
         * and the object returned by the method identity(), which, in this case, returns an EmptySet.
         * This method is defined as public and it returns a boolean(true or false) basing on the correctness of the statement
         * furthermore we set, an automatic answer given by the program, and gets as parameter an object of type
         * SetCat
         */
        public static boolean tryIdentityUnion(SetCat object) {
            //if object||EmptySet has the same content of object, it works
            if (applyUnion(object, unionIdentity()).equals(object)) {
                System.out.println("Identity checked: works");
            } else { //if object||EmptySet != of object
                System.out.println("Identity checked: error");
            }
            return false;
        }

        public static String tryIdentity() {
            String vero = "Correct Insertion";
            SetIntersection set = new SetIntersection();
            set.add(6);
            set.add(3);
            set.add(11);
            set.add(5);
            set.add(7);
            set.add(0);
            set.add(2);
            //if object||EmptySet has the same content of object, it works

            return vero;
        }


    }

    /**
     * This method will apply the second fundamental property of Categories, the associativity, which means that
     * f(gh) == (fg)h, this is done by the application of applySymDif() at various level of the category, so using the
     * various variables as parameters
     * the function is public, static and returns a boolean(true or false), and a default print, the parameters are
     * three Objects of type SetCat
     */
    public static boolean associativityUnion(SetCat x, SetCat y, SetCat z) {

        SetUnion d = new SetUnion();
        SetUnion e = new SetUnion();
        SetUnion f = new SetUnion();
        SetUnion g = new SetUnion();
        d.applyUnion(x, y);//contains x||y
        e.applyUnion(z, d);//contains (x||y)||z
        f.applyUnion(y, z); //contains y||z
        g.applyUnion(f, x); // contains x||(y||z)
        if (e.equals(g)) { //if (x||y)||z has the same content of x||(y||z), it works
            System.out.println("Associativity checked: it works");
        } else {
            System.out.println("Associativity checked: error");
        }
        return false;
    }

    public static String associativity() {
        String vero = "Union is a valid operation";
        String falso = "ERROR, Union is not a valid operation";
        SetSymmetricDifference gne = new SetSymmetricDifference();
        gne.add(6);
        gne.add(3);
        gne.add(11);
        gne.add(5);
        gne.add(7);
        gne.add(0);
        gne.add(2);
        SetSymmetricDifference vv = new SetSymmetricDifference();
        vv.add(15);
        vv.add(9);
        vv.add(1);
        vv.add(85);
        vv.add(5);
        vv.add(3);
        vv.add(4);
        SetSymmetricDifference xx = new SetSymmetricDifference();
        xx.add(15);
        xx.add(9);
        xx.add(1);
        xx.add(85);
        xx.add(5);
        xx.add(3);
        xx.add(4);
        SetUnion dd = new SetUnion();
        SetUnion ee = new SetUnion();
        SetUnion ff = new SetUnion();
        SetUnion gg = new SetUnion();
        dd.applyUnion(gne, vv);//contains x||y
        ee.applyUnion(xx, dd);//contains (x||y)||z
        ff.applyUnion(vv, xx); //contains y||z
        gg.applyUnion(gne, ff); // contains x||(y||z)
        if (ee.equals(gg)) { //if (x||y)||z has the same content of x||(y||z), it works
            return vero;
        } else {
            return falso;
        }

    }


    /**
     * this class will implement the operation of Intersection between two sets, which is mathematically described as
     * a&&b. This means that we create a new set which will contain as elements only those in common between the two
     * sets.
     */
    public static class SetIntersection extends SetCat {

        /**
         * this methods finds the object that intersected with a certain set, returns the set itself.
         * It is set as public and static, takes as input an object of type SetCat and returns an object of the same
         * type
         */
        public static SetCat interIdentity(SetCat a) {
            return a;
        }//in this case the object is the set itself


        /**
         * This method links the applyInter() method and the interIdentity() one. It applies the intersection
         * between a set and the identity object (in this case, the object itself) and checks if the content of the set after
         * the application of the intersection and the set itself is equal.
         * Takes as parameter an object of type SetCat and returns a boolean (true or false), if the first
         * property of categories is satisfied or not.
         */
        public static boolean tryIdentityInter(SetCat b) {
            //if the identity works print this
            if (applyInter(b, interIdentity(b)).equals(b)) {
                System.out.println("Identity checked: works");
            } else { //if it doesn't print this
                System.out.println("Identity checked: error");
            }

            return false; //return the boolean representing the result
        }

        public static String tryIdentity() {
            String insertion = "Identity cannot be checked in this representation, please change operation! ";
            SetIntersection set = new SetIntersection();
            set.add(6);
            set.add(3);
            set.add(11);
            set.add(5);
            set.add(7);
            set.add(0);
            set.add(2);
            //if the identity works print this
            return insertion;


        }

        /**
         * This method applies the intersection between the two set given as parameters and returns the set containing
         * the elements in common between them
         */
        public static SetCat applyInter(SetCat x, SetCat y) {

            SetCat z = new SetCat(); //create the object where the element in common will be added
            for (Object obj : x) { //for every objet in the set x
                if (y.contains(obj)) { //if it is also contained in y
                    z.add(obj); //add it to z

                }
            }
            return z;
        }

        /**
         * This method checks if the second property of Categories is applicable with this operation, so it checks
         * whether  a&&(b&&c) == (a&&b)&&c.
         * It is defined as public and static, gets as parameter the three sets that will be compared and returns a
         * boolean
         */
        public static boolean associativityInter(SetCat a, SetCat b, SetCat c) {

            SetIntersection d = new SetIntersection();
            SetIntersection e = new SetIntersection();
            SetIntersection f = new SetIntersection();
            SetIntersection g = new SetIntersection();
            d.applyInter(a, b);//contains x&&y
            e.applyInter(c, d);//contains (x&&y)&&z
            f.applyInter(b, c); //contains y&&z
            g.applyInter(f, a); // contains x&&(y&&z)
            if (e.equals(g)) { //if it is applicable
                System.out.println("Associativity checked: it works");
            } else { //if it is not
                System.out.println("Associativity checked: error");
            }
            return false;

        }

        public static String associativity() {
            String vero = "Intersection is a valid operation";

            SetSymmetricDifference gne = new SetSymmetricDifference();
            gne.add(6);
            gne.add(3);
            gne.add(11);
            gne.add(5);
            gne.add(7);
            gne.add(0);
            gne.add(2);
            SetSymmetricDifference vv = new SetSymmetricDifference();
            vv.add(15);
            vv.add(9);
            vv.add(1);
            vv.add(85);
            vv.add(5);
            vv.add(3);
            vv.add(4);
            SetSymmetricDifference xx = new SetSymmetricDifference();
            xx.add(15);
            xx.add(9);
            xx.add(1);
            xx.add(85);
            xx.add(5);
            xx.add(3);
            xx.add(4);
            SetIntersection dd = new SetIntersection();
            SetIntersection ee = new SetIntersection();
            SetIntersection ff = new SetIntersection();
            SetIntersection gg = new SetIntersection();
            dd.applyInter(gne, vv);//contains x&&y
            ee.applyInter(xx, dd);//contains (x&&y)&&z
            ff.applyInter(vv, xx); //contains y&&z
            gg.applyInter(ff, gne); // contains x&&(y&&z)

            return vero;


        }
    }

        public static class SetDifference extends SetCat {
            /**
             * This method defines the identity element, which, applied to a set (using the difference operation),
             * will return the set itself. In this case the identity is represented by an EmptySet
             */
            public static SetCat diffIdentity() {
                SetCat EmptySet = new SetCat();
                return EmptySet;
            }

            /**
             * This method applies the difference between the two set given as parameters and returns the set containing
             * the elements in common between them
             */
            public static SetCat applyDifference(SetCat a, SetCat b) {
                SetCat c = new SetCat();
                for (Object object : a) {
                    if (!b.contains(object)) {
                        c.add(object);
                    }
                }
                return c;
            }

            /**
             * This method links the applyDifference() method and the diffIdentity() one. It applies the difference
             * between a set and the identity object (in this case, an empty set) and checks if the content of the set after
             * the application of the difference and the set itself is equal.
             * Takes as parameter an object of type SetCat and returns a boolean (true or false), if the first
             * property of categories is satisfied or not.
             */
            public static boolean tryIdentityDiff(SetCat set) {
                if (applyDifference(set, diffIdentity()).equals(set)) {
                    System.out.println("Identity checked: it works");
                } else {
                    System.out.println("Identity Checked: error");
                }
                return false;
            }

            public static String tryIdentity() {
                String vero = "Correct Insertion";
                SetSymmetricDifference set = new SetSymmetricDifference();
                set.add(6);
                set.add(3);
                set.add(11);
                set.add(5);
                set.add(7);
                set.add(0);
                set.add(2);

                return vero;


            }

            /**
             * This method checks if the second property of Categories is applicable with this operation, so it checks
             * whether  a-(b-c) == (a-b)-c.
             * It is defined as public and static, gets as parameter the three sets that will be compared and returns a
             * boolean
             */
            public static boolean associativityDifference(SetCat x, SetCat y, SetCat z) {

                SetDifference a = new SetDifference();
                SetDifference b = new SetDifference();
                SetDifference c = new SetDifference();
                SetDifference d = new SetDifference();
                a.applyDifference(x, y); //x-y
                b.applyDifference(a, z); //(x-y)-z
                c.applyDifference(y, z); //y-z
                d.applyDifference(x, c); //x-(y-z)
                if (b.equals(d)) {
                    System.out.println("Associativity checked: it works");
                } else {
                    System.out.println("Associativity checked: error");
                }
                return false;
            }

            public static String associativity() {
                String vero = "Difference is a valid operation";
                String falso = "ERROR, Difference is not a valid operation";
                SetSymmetricDifference gne = new SetSymmetricDifference();
                gne.add(6);
                gne.add(3);
                gne.add(11);
                gne.add(5);
                gne.add(7);
                gne.add(0);
                gne.add(2);
                SetSymmetricDifference vv = new SetSymmetricDifference();
                vv.add(15);
                vv.add(9);
                vv.add(1);
                vv.add(85);
                vv.add(5);
                vv.add(3);
                vv.add(4);
                SetSymmetricDifference xx = new SetSymmetricDifference();
                xx.add(15);
                xx.add(9);
                xx.add(1);
                xx.add(85);
                xx.add(5);
                xx.add(3);
                xx.add(4);
                SetDifference aa = new SetDifference();
                SetDifference bb = new SetDifference();
                SetDifference cc = new SetDifference();
                SetDifference dd = new SetDifference();
                aa.applyDifference(gne, vv); //x-y
                bb.applyDifference(aa, xx); //(x-y)-z
                cc.applyDifference(vv, xx); //y-z
                dd.applyDifference(gne, cc); //x-(y-z)
                if (bb.equals(dd)) {
                    return vero;
                } else {
                    return falso;
                }

            }
        }

    }









